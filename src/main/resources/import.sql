CREATE TABLE IF NOT EXISTS QRTZ_JOB_DETAILS         (SCHED_NAME VARCHAR(120) NOT NULL, JOB_NAME  VARCHAR(200) NOT NULL, JOB_GROUP VARCHAR(200) NOT NULL, DESCRIPTION VARCHAR(250) NULL, JOB_CLASS_NAME   VARCHAR(250) NOT NULL, IS_DURABLE VARCHAR(1) NOT NULL, IS_NONCONCURRENT VARCHAR(1) NOT NULL, IS_UPDATE_DATA VARCHAR(1) NOT NULL, REQUESTS_RECOVERY VARCHAR(1) NOT NULL, JOB_DATA BLOB NULL, PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP));
CREATE TABLE IF NOT EXISTS QRTZ_TRIGGERS            (SCHED_NAME VARCHAR(120) NOT NULL, TRIGGER_NAME VARCHAR(200) NOT NULL, TRIGGER_GROUP VARCHAR(200) NOT NULL, JOB_NAME  VARCHAR(200) NOT NULL, JOB_GROUP VARCHAR(200) NOT NULL, DESCRIPTION VARCHAR(250) NULL, NEXT_FIRE_TIME BIGINT(13) NULL, PREV_FIRE_TIME BIGINT(13) NULL, PRIORITY INTEGER NULL, TRIGGER_STATE VARCHAR(16) NOT NULL, TRIGGER_TYPE VARCHAR(8) NOT NULL, START_TIME BIGINT(13) NOT NULL, END_TIME BIGINT(13) NULL, CALENDAR_NAME VARCHAR(200) NULL, MISFIRE_INSTR SMALLINT(2) NULL, JOB_DATA BLOB NULL, PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP), FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP) REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME, JOB_NAME, JOB_GROUP));
CREATE TABLE IF NOT EXISTS QRTZ_SIMPLE_TRIGGERS     (SCHED_NAME VARCHAR(120) NOT NULL, TRIGGER_NAME VARCHAR(200) NOT NULL, TRIGGER_GROUP VARCHAR(200) NOT NULL, REPEAT_COUNT BIGINT(7) NOT NULL, REPEAT_INTERVAL BIGINT(12) NOT NULL, TIMES_TRIGGERED BIGINT(10) NOT NULL, PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP), FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)    REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP));
CREATE TABLE IF NOT EXISTS QRTZ_CRON_TRIGGERS       (SCHED_NAME VARCHAR(120) NOT NULL, TRIGGER_NAME VARCHAR(200) NOT NULL, TRIGGER_GROUP VARCHAR(200) NOT NULL, CRON_EXPRESSION VARCHAR(200) NOT NULL, TIME_ZONE_ID VARCHAR(80), PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP), FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP));
CREATE TABLE IF NOT EXISTS QRTZ_SIMPROP_TRIGGERS    (SCHED_NAME VARCHAR(120) NOT NULL, TRIGGER_NAME VARCHAR(200) NOT NULL, TRIGGER_GROUP VARCHAR(200) NOT NULL, STR_PROP_1 VARCHAR(512) NULL, STR_PROP_2 VARCHAR(512) NULL, STR_PROP_3 VARCHAR(512) NULL, INT_PROP_1 INT NULL, INT_PROP_2 INT NULL, LONG_PROP_1 BIGINT NULL, LONG_PROP_2 BIGINT NULL, DEC_PROP_1 NUMERIC(13, 4) NULL, DEC_PROP_2 NUMERIC(13, 4) NULL, BOOL_PROP_1 VARCHAR(1) NULL, BOOL_PROP_2 VARCHAR(1) NULL, PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP), FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP));
CREATE TABLE IF NOT EXISTS QRTZ_BLOB_TRIGGERS       (SCHED_NAME VARCHAR(120) NOT NULL, TRIGGER_NAME VARCHAR(200) NOT NULL, TRIGGER_GROUP VARCHAR(200) NOT NULL, BLOB_DATA BLOB NULL, PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP), FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP) REFERENCES QRTZ_TRIGGERS(SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP));
CREATE TABLE IF NOT EXISTS QRTZ_CALENDARS           (SCHED_NAME VARCHAR(120) NOT NULL, CALENDAR_NAME  VARCHAR(200) NOT NULL, CALENDAR BLOB NOT NULL, PRIMARY KEY (SCHED_NAME, CALENDAR_NAME));
CREATE TABLE IF NOT EXISTS QRTZ_PAUSED_TRIGGER_GRPS (SCHED_NAME VARCHAR(120) NOT NULL, TRIGGER_GROUP  VARCHAR(200) NOT NULL, PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP));
CREATE TABLE IF NOT EXISTS QRTZ_FIRED_TRIGGERS      (SCHED_NAME VARCHAR(120) NOT NULL, ENTRY_ID VARCHAR(95) NOT NULL, TRIGGER_NAME VARCHAR(200) NOT NULL, TRIGGER_GROUP VARCHAR(200) NOT NULL, INSTANCE_NAME VARCHAR(200) NOT NULL, FIRED_TIME BIGINT(13) NOT NULL, SCHED_TIME BIGINT(13) NOT NULL, PRIORITY INTEGER NOT NULL, STATE VARCHAR(16) NOT NULL, JOB_NAME VARCHAR(200) NULL, JOB_GROUP VARCHAR(200) NULL, IS_NONCONCURRENT VARCHAR(1) NULL, REQUESTS_RECOVERY VARCHAR(1) NULL, PRIMARY KEY (SCHED_NAME, ENTRY_ID));
CREATE TABLE IF NOT EXISTS QRTZ_SCHEDULER_STATE     (SCHED_NAME VARCHAR(120) NOT NULL, INSTANCE_NAME VARCHAR(200) NOT NULL, LAST_CHECKIN_TIME BIGINT(13) NOT NULL, CHECKIN_INTERVAL BIGINT(13) NOT NULL, PRIMARY KEY (SCHED_NAME, INSTANCE_NAME));
CREATE TABLE IF NOT EXISTS QRTZ_LOCKS               (SCHED_NAME VARCHAR(120) NOT NULL, LOCK_NAME  VARCHAR(40) NOT NULL, PRIMARY KEY (SCHED_NAME, LOCK_NAME));



CREATE TABLE IF NOT EXISTS ACT_GE_PROPERTY       (NAME_ varchar(64), VALUE_ varchar(300), REV_ integer, primary key (NAME_));
insert into ACT_GE_PROPERTY values ('schema.version', '5.20.0.2', 1);
insert into ACT_GE_PROPERTY values ('schema.history', 'create(5.20.0.2)', 1);
insert into ACT_GE_PROPERTY values ('next.dbid', '1', 1);

CREATE TABLE IF NOT EXISTS ACT_GE_BYTEARRAY      (ID_ varchar(64), REV_ integer, NAME_ varchar(255), DEPLOYMENT_ID_ varchar(64), BYTES_ longvarbinary, GENERATED_ bit, primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RE_DEPLOYMENT     (ID_ varchar(64), NAME_ varchar(255), CATEGORY_ varchar(255), TENANT_ID_ varchar(255) default '', DEPLOY_TIME_ timestamp, primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RE_MODEL          (ID_ varchar(64) not null, REV_ integer, NAME_ varchar(255), KEY_ varchar(255), CATEGORY_ varchar(255), CREATE_TIME_ timestamp, LAST_UPDATE_TIME_ timestamp, VERSION_ integer, META_INFO_ varchar(4000), DEPLOYMENT_ID_ varchar(64), EDITOR_SOURCE_VALUE_ID_ varchar(64), EDITOR_SOURCE_EXTRA_VALUE_ID_ varchar(64), TENANT_ID_ varchar(255) default '', primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RU_EXECUTION      (ID_ varchar(64), REV_ integer, PROC_INST_ID_ varchar(64), BUSINESS_KEY_ varchar(255), PARENT_ID_ varchar(64), PROC_DEF_ID_ varchar(64), SUPER_EXEC_ varchar(64), ACT_ID_ varchar(255), IS_ACTIVE_ bit, IS_CONCURRENT_ bit, IS_SCOPE_ bit, IS_EVENT_SCOPE_ bit, SUSPENSION_STATE_ integer, CACHED_ENT_STATE_ integer, TENANT_ID_ varchar(255) default '', NAME_ varchar(255), LOCK_TIME_ timestamp, primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RU_JOB            (ID_ varchar(64) NOT NULL, REV_ integer, TYPE_ varchar(255) NOT NULL, LOCK_EXP_TIME_ timestamp, LOCK_OWNER_ varchar(255), EXCLUSIVE_ boolean, EXECUTION_ID_ varchar(64), PROCESS_INSTANCE_ID_ varchar(64), PROC_DEF_ID_ varchar(64), RETRIES_ integer, EXCEPTION_STACK_ID_ varchar(64), EXCEPTION_MSG_ varchar(4000), DUEDATE_ timestamp, REPEAT_ varchar(255), HANDLER_TYPE_ varchar(255), HANDLER_CFG_ varchar(4000), TENANT_ID_ varchar(255) default '', primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RE_PROCDEF        (ID_ varchar(64) NOT NULL, REV_ integer, CATEGORY_ varchar(255), NAME_ varchar(255), KEY_ varchar(255) NOT NULL, VERSION_ integer NOT NULL, DEPLOYMENT_ID_ varchar(64), RESOURCE_NAME_ varchar(4000), DGRM_RESOURCE_NAME_ varchar(4000), DESCRIPTION_ varchar(4000), HAS_START_FORM_KEY_ bit, HAS_GRAPHICAL_NOTATION_ bit, SUSPENSION_STATE_ integer, TENANT_ID_ varchar(255) default '', primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RU_TASK           (ID_ varchar(64), REV_ integer, EXECUTION_ID_ varchar(64), PROC_INST_ID_ varchar(64), PROC_DEF_ID_ varchar(64), NAME_ varchar(255), PARENT_TASK_ID_ varchar(64), DESCRIPTION_ varchar(4000), TASK_DEF_KEY_ varchar(255), OWNER_ varchar(255), ASSIGNEE_ varchar(255), DELEGATION_ varchar(64), PRIORITY_ integer, CREATE_TIME_ timestamp, DUE_DATE_ timestamp, CATEGORY_ varchar(255), SUSPENSION_STATE_ integer, TENANT_ID_ varchar(255) default '', FORM_KEY_ varchar(255), primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RU_IDENTITYLINK   (ID_ varchar(64), REV_ integer, GROUP_ID_ varchar(255), TYPE_ varchar(255), USER_ID_ varchar(255), TASK_ID_ varchar(64), PROC_INST_ID_ varchar(64) null, PROC_DEF_ID_ varchar(64), primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RU_VARIABLE       (ID_ varchar(64) not null, REV_ integer, TYPE_ varchar(255) not null, NAME_ varchar(255) not null, EXECUTION_ID_ varchar(64), PROC_INST_ID_ varchar(64), TASK_ID_ varchar(64), BYTEARRAY_ID_ varchar(64), DOUBLE_ double, LONG_ bigint, TEXT_ varchar(4000), TEXT2_ varchar(4000), primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_RU_EVENT_SUBSCR   (ID_ varchar(64) not null, REV_ integer, EVENT_TYPE_ varchar(255) not null, EVENT_NAME_ varchar(255), EXECUTION_ID_ varchar(64), PROC_INST_ID_ varchar(64), ACTIVITY_ID_ varchar(64), CONFIGURATION_ varchar(255), CREATED_ timestamp not null, PROC_DEF_ID_ varchar(64), TENANT_ID_ varchar(255) default '', primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_EVT_LOG           (LOG_NR_ identity, TYPE_ varchar(64), PROC_DEF_ID_ varchar(64), PROC_INST_ID_ varchar(64), EXECUTION_ID_ varchar(64), TASK_ID_ varchar(64), TIME_STAMP_ timestamp not null, USER_ID_ varchar(255), DATA_ longvarbinary, LOCK_OWNER_ varchar(255), LOCK_TIME_ timestamp, IS_PROCESSED_ bit default 0);
CREATE TABLE IF NOT EXISTS ACT_PROCDEF_INFO      (ID_ varchar(64) not null, PROC_DEF_ID_ varchar(64) not null, REV_ integer, INFO_JSON_ID_ varchar(64), primary key (ID_));

create index ACT_IDX_EXEC_BUSKEY          on ACT_RU_EXECUTION(BUSINESS_KEY_);
create index ACT_IDX_TASK_CREATE          on ACT_RU_TASK(CREATE_TIME_);
create index ACT_IDX_IDENT_LNK_USER       on ACT_RU_IDENTITYLINK(USER_ID_);
create index ACT_IDX_IDENT_LNK_GROUP      on ACT_RU_IDENTITYLINK(GROUP_ID_);
create index ACT_IDX_EVENT_SUBSCR_CONFIG_ on ACT_RU_EVENT_SUBSCR(CONFIGURATION_);
create index ACT_IDX_VARIABLE_TASK_ID     on ACT_RU_VARIABLE(TASK_ID_);
create index ACT_IDX_ATHRZ_PROCEDEF       on ACT_RU_IDENTITYLINK(PROC_DEF_ID_);
create index ACT_IDX_INFO_PROCDEF         on ACT_PROCDEF_INFO(PROC_DEF_ID_);

alter table ACT_GE_BYTEARRAY    add constraint ACT_FK_BYTEARR_DEPL       foreign key (DEPLOYMENT_ID_)                references ACT_RE_DEPLOYMENT;
alter table ACT_RE_PROCDEF      add constraint ACT_UNIQ_PROCDEF          unique (KEY_,VERSION_, TENANT_ID_);
alter table ACT_RU_EXECUTION    add constraint ACT_FK_EXE_PROCINST       foreign key (PROC_INST_ID_)                 references ACT_RU_EXECUTION;
alter table ACT_RU_EXECUTION    add constraint ACT_FK_EXE_PARENT         foreign key (PARENT_ID_)                    references ACT_RU_EXECUTION;
alter table ACT_RU_EXECUTION    add constraint ACT_FK_EXE_SUPER          foreign key (SUPER_EXEC_)                   references ACT_RU_EXECUTION;
alter table ACT_RU_EXECUTION    add constraint ACT_FK_EXE_PROCDEF        foreign key (PROC_DEF_ID_)                  references ACT_RE_PROCDEF (ID_);
alter table ACT_RU_IDENTITYLINK add constraint ACT_FK_TSKASS_TASK        foreign key (TASK_ID_)                      references ACT_RU_TASK;
alter table ACT_RU_IDENTITYLINK add constraint ACT_FK_ATHRZ_PROCEDEF     foreign key (PROC_DEF_ID_)                  references ACT_RE_PROCDEF;
alter table ACT_RU_IDENTITYLINK add constraint ACT_FK_IDL_PROCINST       foreign key (PROC_INST_ID_)                 references ACT_RU_EXECUTION (ID_);
alter table ACT_RU_TASK         add constraint ACT_FK_TASK_EXE           foreign key (EXECUTION_ID_)                 references ACT_RU_EXECUTION;
alter table ACT_RU_TASK         add constraint ACT_FK_TASK_PROCINST      foreign key (PROC_INST_ID_)                 references ACT_RU_EXECUTION;
alter table ACT_RU_TASK         add constraint ACT_FK_TASK_PROCDEF       foreign key (PROC_DEF_ID_)                  references ACT_RE_PROCDEF;
alter table ACT_RU_VARIABLE     add constraint ACT_FK_VAR_EXE            foreign key (EXECUTION_ID_)                 references ACT_RU_EXECUTION;
alter table ACT_RU_VARIABLE     add constraint ACT_FK_VAR_PROCINST       foreign key (PROC_INST_ID_)                 references ACT_RU_EXECUTION;
alter table ACT_RU_VARIABLE     add constraint ACT_FK_VAR_BYTEARRAY      foreign key (BYTEARRAY_ID_)                 references ACT_GE_BYTEARRAY;
alter table ACT_RU_JOB          add constraint ACT_FK_JOB_EXCEPTION      foreign key (EXCEPTION_STACK_ID_)           references ACT_GE_BYTEARRAY;
alter table ACT_RU_EVENT_SUBSCR add constraint ACT_FK_EVENT_EXEC         foreign key (EXECUTION_ID_)                 references ACT_RU_EXECUTION;
alter table ACT_RE_MODEL        add constraint ACT_FK_MODEL_SOURCE       foreign key (EDITOR_SOURCE_VALUE_ID_)       references ACT_GE_BYTEARRAY (ID_);
alter table ACT_RE_MODEL        add constraint ACT_FK_MODEL_SOURCE_EXTRA foreign key (EDITOR_SOURCE_EXTRA_VALUE_ID_) references ACT_GE_BYTEARRAY (ID_);
alter table ACT_RE_MODEL        add constraint ACT_FK_MODEL_DEPLOYMENT   foreign key (DEPLOYMENT_ID_)                references ACT_RE_DEPLOYMENT (ID_);
alter table ACT_PROCDEF_INFO    add constraint ACT_FK_INFO_JSON_BA       foreign key (INFO_JSON_ID_)                 references ACT_GE_BYTEARRAY (ID_);
alter table ACT_PROCDEF_INFO    add constraint ACT_FK_INFO_PROCDEF       foreign key (PROC_DEF_ID_)                  references ACT_RE_PROCDEF (ID_);
alter table ACT_PROCDEF_INFO    add constraint ACT_UNIQ_INFO_PROCDEF     unique (PROC_DEF_ID_);

CREATE TABLE IF NOT EXISTS ACT_HI_PROCINST     (ID_ varchar(64) not null, PROC_INST_ID_ varchar(64) not null, BUSINESS_KEY_ varchar(255), PROC_DEF_ID_ varchar(64) not null, START_TIME_ timestamp not null, END_TIME_ timestamp, DURATION_ bigint, START_USER_ID_ varchar(255), START_ACT_ID_ varchar(255), END_ACT_ID_ varchar(255), SUPER_PROCESS_INSTANCE_ID_ varchar(64), DELETE_REASON_ varchar(4000), TENANT_ID_ varchar(255) default '', NAME_ varchar(255), primary key (ID_), unique (PROC_INST_ID_));
CREATE TABLE IF NOT EXISTS ACT_HI_ACTINST      (ID_ varchar(64) not null, PROC_DEF_ID_ varchar(64) not null, PROC_INST_ID_ varchar(64) not null, EXECUTION_ID_ varchar(64) not null, ACT_ID_ varchar(255) not null, TASK_ID_ varchar(64), CALL_PROC_INST_ID_ varchar(64), ACT_NAME_ varchar(255), ACT_TYPE_ varchar(255) not null, ASSIGNEE_ varchar(255), START_TIME_ timestamp not null, END_TIME_ timestamp, DURATION_ bigint, TENANT_ID_ varchar(255) default '', primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_HI_TASKINST     (ID_ varchar(64) not null, PROC_DEF_ID_ varchar(64), TASK_DEF_KEY_ varchar(255), PROC_INST_ID_ varchar(64), EXECUTION_ID_ varchar(64), NAME_ varchar(255), PARENT_TASK_ID_ varchar(64), DESCRIPTION_ varchar(4000), OWNER_ varchar(255), ASSIGNEE_ varchar(255), START_TIME_ timestamp not null, CLAIM_TIME_ timestamp, END_TIME_ timestamp, DURATION_ bigint, DELETE_REASON_ varchar(4000), PRIORITY_ integer, DUE_DATE_ timestamp, FORM_KEY_ varchar(255), CATEGORY_ varchar(255), TENANT_ID_ varchar(255) default '', primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_HI_VARINST      (ID_ varchar(64) not null, PROC_INST_ID_ varchar(64), EXECUTION_ID_ varchar(64), TASK_ID_ varchar(64), NAME_ varchar(255) not null, VAR_TYPE_ varchar(100), REV_ integer, BYTEARRAY_ID_ varchar(64), DOUBLE_ double, LONG_ bigint, TEXT_ varchar(4000), TEXT2_ varchar(4000), CREATE_TIME_ timestamp, LAST_UPDATED_TIME_ timestamp, primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_HI_DETAIL       (ID_ varchar(64) not null, TYPE_ varchar(255) not null, TIME_ timestamp not null, NAME_ varchar(255), PROC_INST_ID_ varchar(64), EXECUTION_ID_ varchar(64), TASK_ID_ varchar(64), ACT_INST_ID_ varchar(64), VAR_TYPE_ varchar(255), REV_ integer, BYTEARRAY_ID_ varchar(64), DOUBLE_ double, LONG_ bigint, TEXT_ varchar(4000), TEXT2_ varchar(4000), primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_HI_COMMENT      (ID_ varchar(64) not null, TYPE_ varchar(255), TIME_ timestamp not null, USER_ID_ varchar(255), TASK_ID_ varchar(64), PROC_INST_ID_ varchar(64), ACTION_ varchar(255), MESSAGE_ varchar(4000), FULL_MSG_ longvarbinary, primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_HI_ATTACHMENT   (ID_ varchar(64) not null, REV_ integer, USER_ID_ varchar(255), NAME_ varchar(255), DESCRIPTION_ varchar(4000), TYPE_ varchar(255), TASK_ID_ varchar(64), PROC_INST_ID_ varchar(64), URL_ varchar(4000), CONTENT_ID_ varchar(64), TIME_ timestamp, primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_HI_IDENTITYLINK (ID_ varchar(64), GROUP_ID_ varchar(255), TYPE_ varchar(255), USER_ID_ varchar(255), TASK_ID_ varchar(64), PROC_INST_ID_ varchar(64) null, primary key (ID_));

create index ACT_IDX_HI_PRO_INST_END       on ACT_HI_PROCINST(END_TIME_);
create index ACT_IDX_HI_PRO_I_BUSKEY       on ACT_HI_PROCINST(BUSINESS_KEY_);
create index ACT_IDX_HI_ACT_INST_START     on ACT_HI_ACTINST(START_TIME_);
create index ACT_IDX_HI_ACT_INST_END       on ACT_HI_ACTINST(END_TIME_);
create index ACT_IDX_HI_DETAIL_PROC_INST   on ACT_HI_DETAIL(PROC_INST_ID_);
create index ACT_IDX_HI_DETAIL_ACT_INST    on ACT_HI_DETAIL(ACT_INST_ID_);
create index ACT_IDX_HI_DETAIL_TIME        on ACT_HI_DETAIL(TIME_);
create index ACT_IDX_HI_DETAIL_NAME        on ACT_HI_DETAIL(NAME_);
create index ACT_IDX_HI_DETAIL_TASK_ID     on ACT_HI_DETAIL(TASK_ID_);
create index ACT_IDX_HI_PROCVAR_PROC_INST  on ACT_HI_VARINST(PROC_INST_ID_);
create index ACT_IDX_HI_PROCVAR_NAME_TYPE  on ACT_HI_VARINST(NAME_, VAR_TYPE_);
create index ACT_IDX_HI_PROCVAR_TASK_ID    on ACT_HI_VARINST(TASK_ID_);
create index ACT_IDX_HI_ACT_INST_PROCINST  on ACT_HI_ACTINST(PROC_INST_ID_, ACT_ID_);
create index ACT_IDX_HI_IDENT_LNK_USER     on ACT_HI_IDENTITYLINK(USER_ID_);
create index ACT_IDX_HI_IDENT_LNK_TASK     on ACT_HI_IDENTITYLINK(TASK_ID_);
create index ACT_IDX_HI_IDENT_LNK_PROCINST on ACT_HI_IDENTITYLINK(PROC_INST_ID_);
create index ACT_IDX_HI_ACT_INST_EXEC      on ACT_HI_ACTINST(EXECUTION_ID_, ACT_ID_);
create index ACT_IDX_HI_TASK_INST_PROCINST on ACT_HI_TASKINST(PROC_INST_ID_);

CREATE TABLE IF NOT EXISTS ACT_ID_GROUP       (ID_ varchar(64), REV_ integer, NAME_ varchar(255), TYPE_ varchar(255), primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_ID_MEMBERSHIP  (USER_ID_ varchar(64), GROUP_ID_ varchar(64), primary key (USER_ID_, GROUP_ID_));
CREATE TABLE IF NOT EXISTS ACT_ID_USER        (ID_ varchar(64), REV_ integer, FIRST_ varchar(255), LAST_ varchar(255), EMAIL_ varchar(255), PWD_ varchar(255), PICTURE_ID_ varchar(64), primary key (ID_));
CREATE TABLE IF NOT EXISTS ACT_ID_INFO        (ID_ varchar(64), REV_ integer, USER_ID_ varchar(64), TYPE_ varchar(64), KEY_ varchar(255), VALUE_ varchar(255), PASSWORD_ longvarbinary, PARENT_ID_ varchar(255), primary key (ID_));

alter table ACT_ID_MEMBERSHIP add constraint ACT_FK_MEMB_GROUP foreign key (GROUP_ID_) references ACT_ID_GROUP;
alter table ACT_ID_MEMBERSHIP add constraint ACT_FK_MEMB_USER  foreign key (USER_ID_)  references ACT_ID_USER;









